#!/bin/bash

# Exit on any error
set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Variables for user choices
configure_netplan="n"

# Function to get user preferences
get_user_preferences() {
    echo -e "${BOLD}${CYAN}Welcome to the server setup script!${NC}"
    echo
    echo -e "${CYAN}Would you like to configure persistent Netplan network settings?${NC}"
    echo
    echo -e "► ${GREEN}Recommended for ${BOLD}SERVER${NC} installations"
    echo -e "► ${RED}Not recommended for ${BOLD}DESKTOP${NC} installations that uses NetworkManager"
    echo
    echo -e "${CYAN}Choose:${NC}"
    echo -e "  ${GREEN}[y] ${NC}- Yes, configure Netplan (for servers)"
    echo -e "  ${RED}[n] ${NC}- No, skip Netplan configuration (for desktops)"
    echo
    read -p "$(echo -e "${YELLOW}Your choice ${NC}(y/n) [default: n]: ")" configure_netplan
    configure_netplan=${configure_netplan:-n}
    echo
    
    if [ "$configure_netplan" = "y" ]; then
        echo -e "${GREEN}Netplan configuration will be included in the setup.${NC}"
    else
        echo -e "${YELLOW}Skipping Netplan configuration.${NC}"
    fi
    echo
}

# Function to check if the script is run with sudo
check_sudo() {
    if [ "$EUID" -ne 0 ]; then
        echo "Please run this script with sudo or as root."
        exit 1
    fi
}

# Function to update and upgrade the OS
update_upgrade() {
    echo "Updating and upgrading the system..."
    apt update
    apt upgrade -y
}

# Function to disable os logs 
rsyslog_disable() {
    systemctl disable rsyslog.service
}

# Function to install Docker and run vm-connector
install_docker_vmconnector() {
    echo "Installing Docker and running vm-connector..."
    apt install -y docker.io
    docker run -d -p 127.0.0.1:4021:4021/tcp --restart=always --name vm-connector alephim/vm-connector:alpha
}

# Function to install aleph-vm
install_aleph_vm() {
    echo "Installing aleph-vm..."
    wget -P /opt https://github.com/aleph-im/aleph-vm/releases/download/1.3.1/aleph-vm.ubuntu-22.04.deb
    apt install -y /opt/aleph-vm.ubuntu-22.04.deb
}

# Function to install Caddy
install_caddy() {
    echo "Installing Caddy..."
    apt install -y debian-keyring debian-archive-keyring apt-transport-https
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
    apt update
    apt install -y caddy
}

# Function to configure Caddy and aleph-vm
configure_caddy_aleph() {
    echo "Configuring Caddy and aleph-vm..."
    cat >/etc/caddy/Caddyfile <<EOL
{
    https_port 443
}


<--------->:443 {
    tls {
       on_demand
    }
    
    reverse_proxy http://127.0.0.1:4020 {
        # Forward Host header to the backend
        header_up Host {host}
    }
}
EOL

    cat >/etc/aleph-vm/supervisor.env <<EOL
ALEPH_VM_PRINT_SYSTEM_LOGS=True
#ALEPH_VM_USE_JAILER=True
ALEPH_VM_DOMAIN_NAME=
ALEPH_VM_NETWORK_INTERFACE=ens18
ALEPH_VM_DNS_RESOLUTION=resolvectl
ALEPH_VM_IPV6_FORWARDING_ENABLED=False
#ALEPH_VM_IPV6_ADDRESS_POOL="/64"
ALEPH_VM_PAYMENT_RECEIVER_ADDRESS=""
EOL
}

# Function to install sshd
install_openssh() {
    echo "Installing oepnssh..."
    sudo apt install openssh-server -y
}

# Function to make network configuration persistent
configure_persistent_network() {
    echo "Making network configuration persistent..."
    
    # Disable cloud-init network management
    echo "network: {config: disabled}" > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    
    # Create persistent netplan configuration
    cat > /etc/netplan/01-netcfg.yaml <<EOL
network:
    renderer: networkd
    ethernets:
        ens18:
            dhcp4: no
            dhcp6: no
            addresses:
            - 2***:****:****:****::11/64
            - 1***.***.***.***/24
            nameservers:
                addresses:
                - 8.8.8.8
                - 8.8.8.8
                - 2001:4860:4860::8888
                - 2001:4860:4860::8844
            routes:
            - to: default
              via: 1.***.***.1
            - to: ::/0
              via: 2:****::1
              on-link: true
    version: 2
EOL

    # Set correct permissions
    chmod 600 /etc/netplan/01-netcfg.yaml
    
    # Backup old cloud-init config
    mv /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.bak 2>/dev/null || true
    
    # Apply network configuration
    netplan apply
    
    echo "Network configuration made persistent!"
}

# Main execution
main() {
    check_sudo
    get_user_preferences
    update_upgrade
    rsyslog_disable
    install_docker_vmconnector
    install_aleph_vm
    install_caddy
    configure_caddy_aleph
   # install_openssh
   # Only run network configuration if user chose to
    if [ "$configure_netplan" = "y" ]; then
        configure_persistent_network
    fi
    
    echo "Setup completed successfully!"
    echo "To finish installation use NANO to manually change '/etc/aleph-vm/supervisor.env' and '/etc/caddy/Caddyfile' files with your domain and the network interface (ip a)"
}

# Run the main function
main
